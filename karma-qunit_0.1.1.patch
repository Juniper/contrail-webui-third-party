--- old/contrail-webui-third-party/node_modules/karma-qunit/lib/adapter.js	2015-11-06 18:30:57.000000000 -0800
+++ new/contrail-webui-third-party/node_modules/karma-qunit/lib/adapter.js	2015-11-06 18:40:28.000000000 -0800
@@ -1,70 +1,107 @@
 (function(window) {
-
-var createQUnitStartFn = function (tc, runnerPassedIn) {
-  return function () {
-    var runner = runnerPassedIn || window.QUnit;
-    var totalNumberOfTest = 0;
-    var timer = null;
-    var testResult = {};
-
-    runner.done(function () {
-      tc.info({ total: totalNumberOfTest });
-      tc.complete({
-       coverage: window.__coverage__
-      });
-    });
-
-    runner.testStart(function (test) {
-      totalNumberOfTest += 1;
-      timer = new Date().getTime();
-      testResult = { success: true, errors: [] };
-    });
-
-    runner.log(function (details) {
-      if (!details.result) {
-        var msg = '';
-
-        if (details.message) {
-          msg += details.message + '\n';
-        }
-
-        if (typeof details.expected !== 'undefined') {
-          msg += 'Expected: ' + details.expected + '\n' + 'Actual: ' + details.actual + '\n';
-        }
-
-        if (details.source) {
-          msg += details.source + '\n';
-        }
-
-        testResult.success = false;
-        testResult.errors.push(msg);
+  /**
+   * Additional Parameters to support running multiple tests in a single karma run
+   * @param tc (window.__karma__ )
+   * @param defObj (A promise that will resolve once all tests in a test file is executed.)
+   * @param loadRunner (Set to true when Karma is called for first time)
+   * @param runnerPassedIn
+   * @returns {Function}
+   */
+  var createQUnitStartFn = function (tc, defObj, loadRunner, runnerPassedIn) {
+    return function () {
+      var runner = runnerPassedIn || window.QUnit;
+      var totalNumberOfTest = ifNull(window.QUnit.config.totalNumberOfTest, 0);
+      var totalStats = ifNull(window.QUnit.config.totalStats, {all:0, bad:0});
+      var timer = null;
+      var testResult = {};
+
+      /**
+       * when loadRunner is set, test is running for the first time.
+       * set all the required CB that needs to be set only once in running life cycle.
+       */
+      if (loadRunner) {
+
+        runner.testStart(function (test) {
+          totalNumberOfTest += 1;
+          timer = new Date().getTime();
+          testResult = { success: true, errors: [] };
+
+        });
+
+        runner.log(function (details) {
+          if (!details.result) {
+            var msg = '';
+
+            if (details.message) {
+              msg += details.message + '\n';
+            }
+
+            if (typeof details.expected !== 'undefined') {
+              msg += 'Expected: ' + details.expected + '\n' + 'Actual: ' + details.actual + '\n';
+            }
+
+            if (details.source) {
+              msg += details.source + '\n';
+            }
+
+            testResult.success = false;
+            testResult.errors.push(msg);
+          }
+        });
+
+        runner.testDone(function (test) {
+          var result = {
+            description: test.name,
+            suite: test.module && [test.module] || [],
+            success: testResult.success,
+            log: testResult.errors || [],
+            time: new Date().getTime() - timer
+          };
+          tc.result(result);
+        });
+
+        runner.done(function (details) {
+          window.QUnit.config.totalNumberOfTest = totalNumberOfTest;
+          tc.info({ total: totalNumberOfTest });
+        });
+
+        setTimeout(function() {
+          runner.load();
+        }, 50)
       }
-    });
-
-    runner.testDone(function (test) {
-      var result = {
-        description: test.name,
-        suite: test.module && [test.module] || [],
-        success: testResult.success,
-        log: testResult.errors || [],
-        time: new Date().getTime() - timer
-      };
-
-      tc.result(result);
-    });
+      // we need only 2 done callbacks totaly. pop last one if there's already 2
+      // before pushing new one.
+      if (runner.config.done.length > 1) {
+        runner.config.done.pop();
+      }
+      // instead of resolving the defObj in the initial done CB, have a second CB pushed with defObj
+      runner.done(function (details) {
+        defObj.resolve();
+      });
 
-    runner.load();
-    runner.start();
+      runner.start();
+    };
   };
-};
 
-window.QUnit.config.autostart = false;
+  window.QUnit.config.autostart = false;
 
-if (window.removeEventListener) {
-  window.removeEventListener('load', window.QUnit.load, false);
-} else {
-  window.detachEvent('onload', window.QUnit.load);
-}
+  if (window.removeEventListener) {
+    window.removeEventListener('load', window.QUnit.load, false);
+  } else {
+    window.detachEvent('onload', window.QUnit.load);
+  }
+
+//window.__karma__.start = createQUnitStartFn(window.__karma__);
+  /**
+   * Additional Parameters to support running multiple tests in a single karma run
+   * a deferred object is passed to track the execution of tests.
+   * loadRunner flag will be set as when some test callbacks needs to be attached only during initial time.
+   * @param defObj
+   * @param loadRunner
+   * @returns {Function}
+   */
+  window.__karma__.start = function(defObj, loadRunner) {
+    return createQUnitStartFn(window.__karma__, defObj, loadRunner);
+  }
 
-window.__karma__.start = createQUnitStartFn(window.__karma__);
-})(window);
+})(window);
\ No newline at end of file
